package yourfrog.batchmanager;

import com.google.gson.Gson;
import com.sun.glass.events.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.commons.io.FileUtils;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author YourFrog
 */
public class MainFrame extends javax.swing.JFrame {

    private ArrayList<Process> processList;
    
    private Process activeProcess;
    
    private Thread thread;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        super("BatchManager");
        initComponents();
        
        try {
            ProcessBuilder builder = new ProcessBuilder("cmd");
            activeProcess = builder.start();

            processList = new ArrayList();
            processList.add(activeProcess);
            
            Reader reader = new Reader();
            reader.setProcess(activeProcess);
            reader.setTextArea(jTextArea1);
            
            thread = new Thread(reader);
            thread.start();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Nie udało się utworzyć sesji cmd. Aplikacja zostanie zamknięta");
            System.exit(1);
        }
        
        jTextArea1.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu2 = new javax.swing.JPopupMenu();
        clear = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        load = new javax.swing.JMenuItem();
        CommandMenu = new javax.swing.JMenu();
        addCommand = new javax.swing.JMenuItem();
        addSection = new javax.swing.JMenuItem();
        runCommand = new javax.swing.JMenuItem();

        clear.setText("Clear...");
        clear.setToolTipText("");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        jPopupMenu2.add(clear);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jTree1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTree1KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTree1);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Cordia New", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setComponentPopupMenu(jPopupMenu2);
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextArea1MouseReleased(evt);
            }
        });
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane1.addTab("tab1", jScrollPane1);

        jMenu1.setText("File");

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        load.setText("load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });
        jMenu1.add(load);

        jMenuBar1.add(jMenu1);

        CommandMenu.setText("Command");

        addCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        addCommand.setText("Add command");
        addCommand.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
                addCommandMenuKeyReleased(evt);
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        addCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCommandActionPerformed(evt);
            }
        });
        CommandMenu.add(addCommand);

        addSection.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        addSection.setText("Add section");
        addSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSectionActionPerformed(evt);
            }
        });
        CommandMenu.add(addSection);

        runCommand.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        runCommand.setText("Run command");
        runCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCommandActionPerformed(evt);
            }
        });
        CommandMenu.add(runCommand);

        jMenuBar1.add(CommandMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextArea1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseReleased
        
    }//GEN-LAST:event_jTextArea1MouseReleased

    private void jTextArea1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyReleased
       
        ArrayList<Integer> invalidKeys = new ArrayList();
        invalidKeys.add(KeyEvent.VK_SHIFT);
        invalidKeys.add(KeyEvent.VK_ALT);
        invalidKeys.add(KeyEvent.VK_LEFT);
        invalidKeys.add(KeyEvent.VK_RIGHT);
        invalidKeys.add(KeyEvent.VK_UP);
        invalidKeys.add(KeyEvent.VK_DOWN);
        invalidKeys.add(KeyEvent.VK_BACKSPACE);
        invalidKeys.add(KeyEvent.VK_CONTROL);
        
        if( invalidKeys.contains(evt.getKeyCode()) ) {
            return;
        }
        
        if( evt.isAltDown() || evt.isControlDown() ) {
            return;
        }
        
        try {
            OutputStream output = activeProcess.getOutputStream();
            
            if( KeyEvent.VK_ENTER == evt.getKeyCode() ) {
                output.write("\n".getBytes());
                output.flush();
                
                jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
            } else {
                
                String ch = "" + evt.getKeyChar();
                
                JTextField t = new JTextField();
                t.setText(ch);
                
                output.write(t.getText().getBytes());
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Nie udało się wysłać komendy");
        }
    }//GEN-LAST:event_jTextArea1KeyReleased

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        jTextArea1KeyReleased(evt);
    }//GEN-LAST:event_formKeyReleased

    private void addCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCommandActionPerformed
        
        AddCommandFrame frame = new AddCommandFrame();
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setParentFrame(this);
        frame.setVisible(true);
        
    }//GEN-LAST:event_addCommandActionPerformed

    private void addCommandMenuKeyReleased(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_addCommandMenuKeyReleased

    }//GEN-LAST:event_addCommandMenuKeyReleased

    private void jTree1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTree1KeyReleased
        jTextArea1KeyReleased(evt);
    }//GEN-LAST:event_jTree1KeyReleased

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked

    }//GEN-LAST:event_jTree1MouseClicked

    private void runCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCommandActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        
        if( node == null ) {
            return;
        }
        
        Object obj = node.getUserObject();

        if( obj instanceof SingleCommand ) {
            runCommand((SingleCommand) obj);
            return;
        }
        
        JOptionPane.showMessageDialog(this, "To nie jest komenda !");
    }//GEN-LAST:event_runCommandActionPerformed

    private void addSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSectionActionPerformed
        String section = JOptionPane.showInputDialog(this, "Nazwa sekcji");
        
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode();
        newNode.setUserObject(section);
        
        addNode(newNode);
    }//GEN-LAST:event_addSectionActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        jTextArea1.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void jTextArea1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyPressed
        
    }//GEN-LAST:event_jTextArea1KeyPressed

    private void jTextArea1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyTyped
 
    }//GEN-LAST:event_jTextArea1KeyTyped

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

        int response = JOptionPane.showConfirmDialog(this, "Czy napewno zapisać konfiguracje");
        
        if( response != JOptionPane.OK_OPTION ) {
            return;
        }
        
        try {
            JSONObject json = new JSONObject();
            
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
            addToJson(json, root);
            
            File filename = new File("tree.json");
            FileUtils.writeStringToFile(filename, json.toString());
            JOptionPane.showMessageDialog(this, "Poprawnie zapisano ustawienia");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Nie mozna zapisac: " + e.getMessage());
        }
    }//GEN-LAST:event_saveActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Czy napewno wczytać konfiguracje");
        
        if( response != JOptionPane.OK_OPTION ) {
            return;
        }

        try {
            File filename = new File("tree.json");
            String content = FileUtils.readFileToString(filename);
            
            JSONObject json = new JSONObject(content);
            
            DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
            
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
            root.removeAllChildren();
            loadFromJson(json, root);
            
            model.reload();
            JOptionPane.showMessageDialog(this, "Poprawnie wczytano ustawienia");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Nie mozna odczytać: " + e.getMessage());
        }
        
    }//GEN-LAST:event_loadActionPerformed

    private void addToJson(JSONObject json, DefaultMutableTreeNode root) {
        DefaultMutableTreeNode node;
        
        for(int i = 0; i < root.getChildCount(); i++) {
            node = (DefaultMutableTreeNode) root.getChildAt(i);
        
            Object obj = node.getUserObject();
            
            if( obj == null ) {
                continue;
            }
            
            if( obj instanceof String ) {
                JSONObject jsonObject = new JSONObject();
                addToJson(jsonObject, node);
                json.append(obj.toString(), jsonObject);
            }
            
            if( obj instanceof SingleCommand ) {
                SingleCommand command = (SingleCommand) obj;
                
                JSONObject jsonObject = new JSONObject();                
                jsonObject.put("name", command.getName());
                jsonObject.put("command", command.getCommand());
                
                json.put(obj.toString(), jsonObject);
            }
        }
    }
    
    public void loadFromJson(JSONObject json, DefaultMutableTreeNode root) {
        for(String key : json.keySet()) {
            Object obj = json.get(key);
            
            if( obj instanceof JSONArray ) {
                // Sekcja
                JSONArray arr = (JSONArray) obj;
                for(int i = 0; i < arr.length(); i++) {
                    DefaultMutableTreeNode node = new DefaultMutableTreeNode();
                    node.setUserObject(key);
                    
                    loadFromJson(arr.getJSONObject(i), node);
                    root.add(node);                    
                }
            }
            
            if( obj instanceof JSONObject ) {
                // Komenda
                JSONObject j = (JSONObject) obj;
                
                SingleCommand command = new SingleCommand();
                command.setCommand(j.getString("command"));
                command.setName(j.getString("name"));
                
                DefaultMutableTreeNode node = new DefaultMutableTreeNode();
                node.setUserObject(command);
                root.add(node);   
            }
        }

    }
    
    public void addNode(DefaultMutableTreeNode newNode) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        
        if( node == null ) {
            node = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
        }      
        
        node.add(newNode);
        
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        model.reload();
    }
    
    public void runCommand(SingleCommand command) {
        runCommand(command.getCommand());
    }
    
    private void runCommand(String command) {
        command = command.trim();
        command += "\n";
        
        try {
            OutputStream output = activeProcess.getOutputStream();
            
            output.write(command.getBytes());
            output.flush();
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu CommandMenu;
    private javax.swing.JMenuItem addCommand;
    private javax.swing.JMenuItem addSection;
    private javax.swing.JMenuItem clear;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem load;
    private javax.swing.JMenuItem runCommand;
    private javax.swing.JMenuItem save;
    // End of variables declaration//GEN-END:variables
}
